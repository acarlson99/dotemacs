;Coplien form for c++ coding ease
(defun hpp (name)
    "Add Coplien form to .hpp for C++ Classes painlessly"
    (interactive "sClass name: ")
    (insert "\n#ifndef "(upcase name)"_HPP\n# define "(upcase name)"_HPP\n")
	(insert "\n")
    (insert "# include <iostream>\n# include <string>\n# include <stdexcept>\n\n")
    (insert "class "name" {\n\npublic:\n")
    (insert "\t"name"( std::string );\n")
    (insert "\t"name"( void );\n")
    (insert "\t"name"( "name" const & cp);\n")
    (insert "\t~"name"( void );\n")
    (insert "\t"name"& operator=( "name" const &);\n")
    (insert "\nprivate:\n\n};\n\n#endif\n")
)
(defun cpp (name)
    "Add Coplien form to .cpp for C++ Classes painlessly"
    (interactive "sClass name: ")
    (insert "\n#include \""name".hpp\"\n\n")
    (insert name"::"name"( std::string ) : { }\n")
    (insert name"::"name"( void ) { }\n")
    (insert name"::"name"( "name" const & cp) { *this = cp; }\n")
    (insert name"::~"name"( void ) { }\n")
    (insert name"& "name"::operator=( "name" const &) { return *this; }\n")
)
(defun class (name)
    "Coplien Form Caller"
    (interactive "s: ")
    (if (equal (file-name-extension(buffer-file-name)) "hpp")
        (hpp name))
    (if (equal (file-name-extension(buffer-file-name)) "cpp")
        (cpp name))
)
(defun hppexc (name nest)
    "Add Coplien form to .hpp for C++ Exceptions painlessly"
    (interactive "sClass name: \nsNested in: ")
    (insert "\tclass "name"Exception : public std::exception {\n\tpublic:\n")
    (insert "\t\t"name"Exception( void );\n")
    (insert "\t\t"name"Exception( "name"Exception const & cp);\n")
    (insert "\t\t~"name"Exception( void ) throw();\n")
    (insert "\t\t"name"Exception& operator=( "name"Exception const & e);\n")
    (insert "\t\tvirtual const char* what() const throw();\n")
    (insert "\t};\n")
)
(defun cppexc (name nest)
    "Add Coplien form to .cpp for C++ Exceptions painlessly"
    (interactive "sClass name: \nsNested in: ")
    (insert nest"::"name"Exception::"name"Exception( void ) { }\n")
    (insert nest"::"name"Exception::"name"Exception( "name"Exception const & cp) { *this = cp; }\n")
    (insert nest"::"name"Exception::~"name"Exception( void ) throw() { }\n")
    (insert nest"::"name"Exception& "nest"::"name"Exception::operator=( "name"Exception const &) { return *this; }\n")
    (insert "const char* "nest"::"name"Exception::what( void ) const throw() {\n\treturn \"ERR_MSG\";\n}\n")
)
(defun eclass (name nest)
    "Exception Coplien Form Caller"
    (interactive "sException Name: \nsNested in class: ")
    (if (equal (file-name-extension(buffer-file-name)) "hpp")
        (hppexc name nest))
    (if (equal (file-name-extension(buffer-file-name)) "cpp")
        (cppexc name nest))
)

(defun my-c++-config()
  "For use in 'c++-mode-hook'."
  ;; template exception insertion stuff from Steven
  (global-set-key (kbd "C-c t i") 'class)
  (global-set-key (kbd "C-c t e") 'eclass)
  ;; whitespace cleanup
  (global-set-key (kbd "C-c w") 'whitespace-cleanup)
  ;; uncommenting
  (global-set-key (kbd "C-c c") 'uncomment-region))
